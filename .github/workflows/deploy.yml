name: Build and Code Review

on:
  push:
    branches: [main]
  pull_request:

env:
  applicationfolder: spring-boot-hello-world-example
  AWS_REGION: us-east-1
  S3BUCKET: mesh-terra-statefile-bucket
  S3bucket_CodeGuru: codeguru-reviewer-meshach12345678

jobs:
  build:
    name: Build and Upload Artifacts
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v2
        name: Checkout Repository

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Install jq
        run: sudo apt-get install -y jq        

      - name: Make scripts executable
        run: chmod -R +x ./.github

      - name: Build and Package Maven
        id: package
        working-directory: $GITHUB_WORKSPACE/${{ env.applicationfolder }}
        run: $GITHUB_WORKSPACE/.github/scripts/build.sh

      - name: Upload Artifact to S3
        working-directory: ${{ env.applicationfolder }}/target
        run: aws s3 cp *.war s3://${{ env.S3BUCKET }}/
      
      - name: Upload build artifact to GitHub Actions
        uses: actions/upload-artifact@v2
        with:
          name: build-file
          path: ${{ env.applicationfolder }}/target/*.war

  codescan:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      security-events: write

    steps:
    
    - name: Download the artifact from GitHub Actions
      uses: actions/download-artifact@v2
      with:
        name: build-file 
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Checkout Code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0 

    - name: CodeGuru Reviewer
      uses: aws-actions/codeguru-reviewer@v1.1
      if: ${{ always() }} 
      with:          
        s3_bucket: ${{ env.S3bucket_CodeGuru }} 
        build_path: . # Ensure your build files are here

    - name: Store SARIF file
      uses: actions/upload-artifact@v2
      with:
        name: SARIF_recommendations
        path: ./codeguru-results.sarif.json

    - name: Upload review result
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: codeguru-results.sarif.json
    
    - run: |
        echo "Check for critical vulnerabilities"
        count=$(cat codeguru-results.sarif.json | jq '.runs[].results[] | select(.level == "error") | .level' | wc -l)
        if (( $count > 0 )); then
          echo "There are $count critical findings, hence stopping the pipeline."
          exit 1
